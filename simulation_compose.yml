version: '2.29'

services:
  postgres:
    image: postgres:16-alpine
    ports:
      - 5432:5432
    volumes:
      - ~/data/postgres:/var/lib/postgresql/data
      - ./db_user.sql:/docker-entrypoint-initdb.d/1-user.sql
      - ./db_schema.sql:/docker-entrypoint-initdb.d/2-schema.sql
      - ./sample_data.sql:/docker-entrypoint-initdb.d/3-data.sql
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=admin
    networks:
      - localnet

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - localnet

  broker1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: broker1
    container_name: broker1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: false
    depends_on:
      - zoo1
    networks:
      - localnet

  # kafka-rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.3.2
  #   hostname: kafka-rest-proxy
  #   container_name: kafka-rest-proxy
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     # KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
  #     KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
  #     #KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
  #     KAFKA_REST_HOST_NAME: kafka-rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://broker1:19092
  #   depends_on:
  #     - zoo1
  #     - broker1
  #   networks:
  #     - localnet

  producer-app:
    build:
      context: .
      dockerfile: ./producer/Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - broker1
    environment:
      - KAFKA_HOST=broker1:19092
      - AUTH_APP_NAME=authorization-app:8084
    networks:
      - localnet
  
  consumer-app:
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    ports:
      - "8090:8090"
    restart: always
    depends_on:
      - producer-app
      - broker1
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/transaction_db
      - SPRING_DATASOURCE_USERNAME=read_write_user
      - SPRING_DATASOURCE_PASSWORD=password
      - KAFKA_HOST=broker1:19092
    networks:
      - localnet

  authorization-app:
    container_name: authorization-app
    build:
      context: .
      dockerfile: ./authorization/Dockerfile
    ports:
      - "8084:8084"
    restart: always
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/transaction_db
      - SPRING_DATASOURCE_USERNAME=read_write_user
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - localnet
  
networks:
  localnet:
    driver: bridge
